AWSTemplateFormatVersion: 2010-09-09

# File format follows https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html

Description: >-
  Senzing aws-cloudformation-ecs/senzing-demo-hosted-zone/spike-api-gateway-cognito Version: 0.1.0
  For more information see https://github.com/Senzing/aws-cloudformation-ecs

# -----------------------------------------------------------------------------
# Metadata
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
# -----------------------------------------------------------------------------

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Security
        Parameters:
          - CidrInbound
          - Route53HostedZoneId
    ParameterLabels:
      CidrInbound:
        default: 'Required: Allowed inbound connections using CIDR notation.'

# -----------------------------------------------------------------------------
# Parameters
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
# -----------------------------------------------------------------------------

Parameters:

  CidrInbound:
    AllowedPattern: '(?:\d{1,3}\.){3}\d{1,3}(?:/\d\d?)?'
    ConstraintDescription: Inbound CIDR must be in the format n.n.n.n/n
    Default: 0.0.0.0/0
    Description: 'Help: http://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#cidrinbound'
    Type: String

# -----------------------------------------------------------------------------
# Mappings
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
# -----------------------------------------------------------------------------

Mappings:

  Constants:
    Stack:
      Name: spike-api-gateway-cognito
    Run:
      API_Gateway: Yes

  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.1.0/24
    pubsubnet2:
      cidr: 10.0.2.0/24
    privsubnet1:
      cidr: 10.0.3.0/24
    privsubnet2:
      cidr: 10.0.4.0/24

# -----------------------------------------------------------------------------
# Conditions
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
# -----------------------------------------------------------------------------

Conditions:

  IfRunApiGateway: !Equals
    - !FindInMap [Constants, Run, API_Gateway]
    - Yes

# -----------------------------------------------------------------------------
# Resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# -----------------------------------------------------------------------------

Resources:

# -- Iam -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html

  IamRoleSampleService:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub "${AWS::StackName}-iam-role-sample-service"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-sample-service"
    Type: AWS::IAM::Role

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html

  IamPolicyLoggingCreateStream:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-logging-create-stream"
      PolicyDocument:
        Statement:
          -
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleSampleService
    Type: AWS::IAM::Policy


  IamPolicyTaskRunner:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-iam-policy-task-runner"
      PolicyDocument:
        Statement:
          -
            Action:
              - ecs:DescribeTasks
              - ecs:RunTask
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      Roles:
       - !Ref IamRoleSampleService
    Type: AWS::IAM::Policy

# -- Logging ------------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html

  LogsLogGroupMain:
    Properties:
      LogGroupName: !Sub
        - "/senzing/${StackName}/${AWS::StackName}"
        - StackName: !FindInMap [Constants, Stack, Name]
    Type: AWS::Logs::LogGroup

# -- API Gateway --------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub "${AWS::StackName}-api-gateway"
  
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html
  
  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
    Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.authorization
      Name: CognitoAuthorizer
      ProviderARNs: !GetAtt CognitoUsers.Arn
      RestApiId: !Ref RestApi

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-resource.html

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      PathPart: test
      ParentId: !GetAtt RestApi.RootResourceId

# -- Cognito --------------------------------------------------------------

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html

  UserPool:
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: !Sub
            - |
              <html>
              <p>
                  To log into https://${AWS::StackName}.${DomainName},
                  use these credentials:
                  <ul>
                      <li><b>Username:</b>  {username}</li>
                      <li><b>OneTime Password:</b>  {####}</li>
                  </ul>
              </p>
              <p>
                  You will be prompted to change your password.
                  This one-time password is valid for three weeks.
              </p>
              </html>
            - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName
          EmailSubject: !Sub 'Temporary password for AWS ${AWS::StackName} stack'
          SMSMessage: 'Use the username {username} and the temporary password {####} to log in for the first time.'
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 16
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 21
      UsernameAttributes:
        - email
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
    Type: AWS::Cognito::UserPool

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooldomain.html

  UserPoolDomain: # Provides Cognito Login Page
    Properties:
      Domain: !Sub "${AWS::StackName}"
      UserPoolId: !Ref UserPool
    Type: AWS::Cognito::UserPoolDomain

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html

  UserPoolClient:
    Properties:
      AllowedOAuthFlows:
        - code # Required for ALB authentication
      AllowedOAuthFlowsUserPoolClient: true # Required for ALB authentication
      AllowedOAuthScopes:
        - openid
      CallbackURLs:
        - !Sub
          - "https://${AWS::StackName}.${DomainName}/oauth2/idpresponse"
          - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName
      GenerateSecret: true
      SupportedIdentityProviders: # Optional: add providers for identity federation
        - COGNITO
      UserPoolId: !Ref UserPool
    Type: AWS::Cognito::UserPoolClient

# -- ECS Cluster --------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html

  EcsCluster:
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-cluster"
    Type: AWS::ECS::Cluster

# -- EcsTaskDefinition --------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html

  EcsTaskDefinitionSwagger:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: URL
              Value: "https://raw.githubusercontent.com/Senzing/senzing-rest-api-specification/master/senzing-rest-api.yaml"
            -
              Name: BASE_URL
              Value: /swagger
          Essential: true
          Image: public.ecr.aws/senzing/swagger-ui:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          Name: swagger
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleSwagger.Arn
      Family: !Sub "${AWS::StackName}-task-definition-swagger"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-swagger"
      TaskRoleArn: !GetAtt IamRoleSwagger.Arn
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionXterm:
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_BASE_URL_XTERM
              Value: /xterm/
            -
              Name: SENZING_SKIP_DATABASE_PERFORMANCE_TEST
              Value: 'true'
          Essential: true
          Image: public.ecr.aws/senzing/xterm:1.1.0
          LinuxParameters:
            Capabilities:
              Add:
                - SYS_PTRACE
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroupMain
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          Name: xterm
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: tcp
          Privileged: false
          ReadonlyRootFilesystem: false
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt IamRoleXterm.Arn
      Family: !Sub "${AWS::StackName}-task-definition-xterm"
      Memory: '8192'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-xterm"
    Type: AWS::ECS::TaskDefinition

# -- EcsService ---------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html

  EcsServiceSwagger:
    Condition: IfRunSwaggerHttps
    DependsOn:
     - ListenerPort443
     - ListenerRuleSwagger
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: swagger
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupSwagger
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPublic
          Subnets:
            - !Ref Ec2SubnetPublic1
            - !Ref Ec2SubnetPublic2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: swagger
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-swagger"
      TaskDefinition: !Ref EcsTaskDefinitionSwagger
    Type: AWS::ECS::Service


  EcsServiceXterm:
    Condition: IfRunXtermHttps
    DependsOn:
     - ListenerPort443
     - ListenerRuleXterm
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: xterm
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroupXterm
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref Ec2SecurityGroupLoadBalancerPublic
          Subnets:
            - !Ref Ec2SubnetPublic1
            - !Ref Ec2SubnetPublic2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: xterm
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-xterm"
      TaskDefinition: !Ref EcsTaskDefinitionXterm
    Type: AWS::ECS::Service

# -----------------------------------------------------------------------------
# Outputs
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
# -----------------------------------------------------------------------------

Outputs:

  Ec2Vpc:
    Description: 'The ID of the VPC. Help: http://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#ec2vpc'
    Export:
      Name: !Sub "${AWS::StackName}-ec2-VpcId"
    Value: !Ref Ec2Vpc

  Host:
    Description: 'Host name of public services. Help: http://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#host'
    Export:
      Name: !Sub "${AWS::StackName}-host"
    Value: !GetAtt LoadBalancerPublic.DNSName

  SubnetPublic1:
    Description: 'The ID of public subnet 1. Help: http://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetpublic1'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-1"
    Value: !Ref Ec2SubnetPublic1

  SubnetPublic2:
    Description: 'The ID of public subnet 2. Help: http://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#subnetpublic2'
    Export:
      Name: !Sub "${AWS::StackName}-subnet-public-2"
    Value: !Ref Ec2SubnetPublic2

  UrlSwagger:
    Condition: IfRunSwaggerHttps
    Description: 'HTTPS URL for Swagger. Help: http://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#urlswagger'
    Value: !Sub
      - "https://${AWS::StackName}.${DomainName}/swagger/"
      - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName

  UrlXterm:
    Condition: IfRunXtermHttps
    Description: 'HTTPS URL for Xterm. Help: http://hub.senzing.com/aws-cloudformation-ecs-poc-simple/#urlxterm'
    Value: !Sub
      - "https://${AWS::StackName}.${DomainName}/xterm/"
      - DomainName: !GetAtt LambdaRunnerFindDomainName.DomainName
