AWSTemplateFormatVersion: 2010-09-09

# File format follows https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html

Description: >-
  Senzing formation for AWS FARGATE...

# -----------------------------------------------------------------------------
# Parameters
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
# -----------------------------------------------------------------------------

Parameters:

  AcceptEula:
    AllowedPattern: '^I_ACCEPT_THE_SENZING_EULA$'
    ConstraintDescription: >-
      AcceptEula parameter must be 'I_ACCEPT_THE_SENZING_EULA'
    Description: >-
      Required: If you accept the Senzing End User License Agreements at
      https://senzing.com/end-user-license-agreement,
      enter 'I_ACCEPT_THE_SENZING_EULA'.
    Type: String

  DbUsername:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: senzing
    Description: "Required: Username for AWS Aurora PostgreSQL serverless database access."
    MaxLength: 16
    MinLength: 1
    Type: String

  DbPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters.
    Description: "Required: Password for AWS Aurora PostgreSQL serverless database access."
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String

  SecurityGroupIds:
    Default: ''
    Description: >-
      Optional: Existing security group to associate the container instances.
      Creates one by default.
    Type: CommaDelimitedList

  SenzingInputUrl:
    Default: https://public-read-access.s3.amazonaws.com/TestDataSets/test-dataset-100m.json.gz
    Description: "Required: URL to file of JSON records to be sent to AWS SQS queue."
    Type: String

  SenzingLicenseAsBase64:
    Description: "Optional: Senzing license as base64 encoded string."
    Type: String

  SenzingRecordMax:
    Default: 100000
    Description: "Required: Last record to read from SenzingInputUrl. '0' means read to end of file."
    Type: Number

  SenzingRecordMin:
    Default: 0
    Description: "Required: First record to read from SenzingInputUrl.  '0' means start from the beginning."
    Type: Number

  StartApiServer:
    Description: Would you like to run the Senzing API service?
    Default: "No"
    Type: String
    AllowedValues:
      - "No"
      - "Yes"

  StartSshd:
    Description: Would you like to run sshd service?
    Default: "No"
    Type: String
    AllowedValues:
      - "No"
      - "Yes"

  VpcAvailabilityZones:
    Default: ''
    Description: >-
      Optional: Comma-delimited list of VPC availability zones in which to
      create subnets.  Required if setting VpcId.
    Type: CommaDelimitedList

  VpcId:
    AllowedPattern: '^(?:vpc-[0-9a-f]{8}|vpc-[0-9a-f]{17}|)$'
    ConstraintDescription: >-
      VPC Id must begin with 'vpc-' followed by either an 8 or 17 character
      identifier, or leave blank to have a new VPC created
    Default: ''
    Description: "Optional: VPC Id of existing VPC. Leave blank to have a new VPC created."
    Type: String

# -----------------------------------------------------------------------------
# Mappings
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
# -----------------------------------------------------------------------------

Mappings:

  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.0.0/24
    pubsubnet2:
      cidr: 10.0.1.0/24

# -----------------------------------------------------------------------------
# Conditions
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
# -----------------------------------------------------------------------------

Conditions:

  CreateSecurityGroup: !Equals
    - !Join
      - ''
      - !Ref SecurityGroupIds
    - ''

  CreateVpcResources: !Equals
    - !Ref VpcId
    - ''

  IfStartApiServer: !Equals
    - !Ref StartApiServer
    - "Yes"

  IfStartSshd: !Equals
    - !Ref StartSshd
    - "Yes"

  UseSpecifiedVpcAvailabilityZones: !Not
    - !Equals
      - !Join
        - ''
        - !Ref VpcAvailabilityZones
      - ''

# -----------------------------------------------------------------------------
# Resources
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# -----------------------------------------------------------------------------

Resources:

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html

  Ec2Vpc:
    Condition: CreateVpcResources
    Properties:
      CidrBlock: !FindInMap
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-vpc"
    Type: AWS::EC2::VPC

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html

  Ec2SubnetPublic1:
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone: !If
        - UseSpecifiedVpcAvailabilityZones
        - !Select
          - '0'
          - !Ref VpcAvailabilityZones
        - !Select
          - '0'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet1
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-1"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet


  Ec2SubnetPublic2:
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone: !If
        - UseSpecifiedVpcAvailabilityZones
        - !Select
          - '1'
          - !Ref VpcAvailabilityZones
        - !Select
          - '1'
          - !GetAZs
            Ref: AWS::Region
      CidrBlock: !FindInMap
        - VpcCidrs
        - pubsubnet2
        - cidr
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-subnet-2"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::Subnet

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html

  EcsSecurityGroup:
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: -1
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          Description: SSH
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        -
          CidrIp: 0.0.0.0/0
          Description: HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        -
          CidrIp: 0.0.0.0/0
          Description: HTTPS
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        -
          CidrIp: 0.0.0.0/0
          Description: NFS
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
        -
          CidrIp: 0.0.0.0/0
          Description: Senzing X-Term
          FromPort: 5000
          IpProtocol: tcp
          ToPort: 5000
        -
          CidrIp: 0.0.0.0/0
          Description: PostgreSQL
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
        -
          CidrIp: 0.0.0.0/0
          Description: Senzing API server
          FromPort: 8250
          IpProtocol: tcp
          ToPort: 8250
        -
          CidrIp: 0.0.0.0/0
          Description: Senzing Web App
          FromPort: 8251
          IpProtocol: tcp
          ToPort: 8251
        -
          CidrIp: 0.0.0.0/0
          Description: Swagger UI
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
        -
          CidrIp: 0.0.0.0/0
          Description: Senzing Jupyter notebooks
          FromPort: 8888
          IpProtocol: tcp
          ToPort: 8888
        -
          CidrIp: 0.0.0.0/0
          Description: phpPgAdmin
          FromPort: 9171
          IpProtocol: tcp
          ToPort: 9171
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-security-group"
      VpcId: !If
        - CreateVpcResources
        - !Ref Ec2Vpc
        - !Ref VpcId
    Type: AWS::EC2::SecurityGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html

  Ec2InternetGateway:
    Condition: CreateVpcResources
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-internet-gateway"
    Type: AWS::EC2::InternetGateway

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html

  Ec2VpcGatewayAttachment:
    Condition: CreateVpcResources
    Properties:
      InternetGatewayId: !Ref Ec2InternetGateway
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::VPCGatewayAttachment

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html

  Ec2RouteTable:
    Condition: CreateVpcResources
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-route-table"
      VpcId: !Ref Ec2Vpc
    Type: AWS::EC2::RouteTable

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html

  Ec2Route:
    Condition: CreateVpcResources
    DependsOn:
     - Ec2VpcGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Ec2InternetGateway
      RouteTableId: !Ref Ec2RouteTable
    Type: AWS::EC2::Route

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html

  Ec2SubnetRouteTableAssociation1:
    Condition: CreateVpcResources
    Properties:
      RouteTableId: !Ref Ec2RouteTable
      SubnetId: !Ref Ec2SubnetPublic1
    Type: AWS::EC2::SubnetRouteTableAssociation


  Ec2SubnetRouteTableAssociation2:
    Condition: CreateVpcResources
    Properties:
      RouteTableId: !Ref Ec2RouteTable
      SubnetId: !Ref Ec2SubnetPublic2
    Type: AWS::EC2::SubnetRouteTableAssociation

# -- Elastic File System ------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html

  EfsFileSystem:
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-efs-filesystem"
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
    Type: AWS::EFS::FileSystem

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html

  EfsMountTarget1:
    Properties:
      FileSystemId:
        Ref: EfsFileSystem
      SecurityGroups:
        - Ref: EcsSecurityGroup
      SubnetId:
        Ref: Ec2SubnetPublic1
    Type: AWS::EFS::MountTarget


  EfsMountTarget2:
    Properties:
      FileSystemId:
        Ref: EfsFileSystem
      SecurityGroups:
        - Ref: EcsSecurityGroup
      SubnetId:
        Ref: Ec2SubnetPublic2
    Type: AWS::EFS::MountTarget

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html

# EfsAccessPoint:
#   Type: AWS::EFS::AccessPoint
#   Properties:
#     ClientToken: !Sub "${AWS::StackName}-efs-access-point"
#     FileSystemId: !Ref EfsFileSystem
#     RootDirectory:
#       Path: "/efs0"

# -- Database -----------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html

  RdsDbSubnetGroup:
    DependsOn:
      - Ec2SubnetPublic1
      - Ec2SubnetPublic2
    Properties:
      DBSubnetGroupDescription: !Sub "${AWS::StackName}-db-subnet-description"
      DBSubnetGroupName: !Sub "${AWS::StackName}-db-subnet"
      SubnetIds:
        - !Ref Ec2SubnetPublic1
        - !Ref Ec2SubnetPublic2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-subnet-group"
    Type: AWS::RDS::DBSubnetGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbclusterparametergroup.html

  RdsDbClusterParameterGroup:
    Properties:
      Description: !Sub "${AWS::StackName}-rds-db-cluster-parameter-group-description"
      Family: aurora-postgresql10
      Parameters:
        "synchronous_commit": "off"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-cluster-parameter-group"
    Type: AWS::RDS::DBClusterParameterGroup

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html

  RdsDbCluster:
    DependsOn:
      - RdsDbSubnetGroup
      - RdsDbClusterParameterGroup
    Properties:
      AvailabilityZones:
        - !GetAtt Ec2SubnetPublic1.AvailabilityZone
        - !GetAtt Ec2SubnetPublic2.AvailabilityZone
      DatabaseName: G2
      DBClusterIdentifier: !Sub "${AWS::StackName}-aurora-cluster"
      DBClusterParameterGroupName:
        Ref: RdsDbClusterParameterGroup
      DBSubnetGroupName:
        Ref: RdsDbSubnetGroup
      DeletionProtection: false
      EnableHttpEndpoint: true
      EnableIAMDatabaseAuthentication: false
      Engine: aurora-postgresql
      EngineMode: serverless
      EngineVersion: 10.7
      MasterUsername: !Ref DbUsername
      MasterUserPassword: !Ref DbPassword
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 192
        MinCapacity: 2
        SecondsUntilAutoPause: 3600
#       https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/298
#       TimeoutAction: ForceApplyCapacityChange
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-db-cluster"
      VpcSecurityGroupIds:
        - !Ref EcsSecurityGroup
    Type: AWS::RDS::DBCluster


# -- Queue --------------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html

  SqsQueueDeadLetter:
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub "${AWS::StackName}-sqs-dead-letter-queue"
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 30
    Type: AWS::SQS::Queue


  SqsQueue:
    Properties:
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 1209600
      QueueName: !Sub "${AWS::StackName}-sqs-queue"
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - SqsQueueDeadLetter
            - Arn
        maxReceiveCount: 100
      VisibilityTimeout: 300
    Type: AWS::SQS::Queue

# -- ECS Cluster --------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html

  EcsCluster:
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      ClusterSettings:
        -
          Name: containerInsights
          Value: disabled
    Type: AWS::ECS::Cluster

# -- Logging ------------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html

  LogsLogGroup:
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-log-group"
    Type: AWS::Logs::LogGroup

# https://operatingops.org/2019/09/28/cloudwatch-logs-preventing-orphaned-log-groups/
# LogsLogGroup2:
#   Type: "AWS::Logs::LogGroup"
#   Properties:
#     LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-lambda-debug"

# -- EcsTaskDefinition --------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html

  EcsTaskDefinitionInitEfs:
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      ContainerDefinitions:
        -
          Command:
            - "mkdir"
            - "/efs/g2"
            - "&&"
            - "mkdir"
            - "-p"
            - "/efs/data/1.0.0"
            - "&&"
            - "mkdir"
            - "/efs/etc"
            - "&&"
            - "mkdir"
            - "/efs/var"
          Essential: true
          Image: busybox
          LinuxParameters:
            Capabilities: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-efs-root
              ContainerPath: /efs
              ReadOnly: false
          Name: efsinitcontainer
          Privileged: false
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
      Cpu: 512
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      Family: !Sub "${AWS::StackName}-task-definition-init-efs"
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-efs"
      Volumes:
        -
          Name: senzing-efs-root
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: "/"
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInstallSenzing:
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_ACCEPT_EULA
              Value: !Ref AcceptEula
          Essential: true
          Image: senzing/yum:1.1.3
          LinuxParameters:
            Capabilities: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-data-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: false
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: false

          Name: yum
          Privileged: false
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
          User: 0
      Cpu: 512
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      Family: !Sub "${AWS::StackName}-task-definition-install-senzing"
      Memory: 4096
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-install-senzing"
      Volumes:
        -
          Name: senzing-data-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /data
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitPostgres:
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub "postgresql://${DbUsername}:${DbPassword}@${RdsDbCluster.Endpoint.Address}:${RdsDbCluster.Endpoint.Port}/G2"
            -
              Name: SENZING_SQL_FILE
              Value: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
          Essential: true
          Image: senzing/postgresql-client:1.0.0
          LinuxParameters:
            Capabilities: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
          Name: postgresinit
          Privileged: false
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
      Cpu: 512
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      Family: !Sub "${AWS::StackName}-task-definition-init-postgres"
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-postgres"
      Volumes:
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
            AuthorizationConfig: {}
            FilesystemId:
              Ref: EfsFileSystem
            RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionInitSenzing:
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub "postgresql://${DbUsername}:${DbPassword}@${RdsDbCluster.Endpoint.Address}:${RdsDbCluster.Endpoint.Port}/G2"
            -
              Name: SENZING_LICENSE_BASE64_ENCODED
              Value: !Sub "${SenzingLicenseAsBase64}"
          Essential: true
          Image: senzing/init-container:1.6.3
          LinuxParameters:
            Capabilities: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: false
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: false
          Name: initcontainer
          Privileged: false
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
          User: 0
      Cpu: 512
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      Family: !Sub "${AWS::StackName}-task-definition-init-senzing"
      Memory: 4096
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-init-efs"
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/1.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionStreamProducer:
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_INPUT_URL
              Value: !Sub "${SenzingInputUrl}"
            -
              Name: SENZING_MONITORING_PERIOD_IN_SECONDS
              Value: 60
            -
              Name: SENZING_READ_QUEUE_MAXSIZE
              Value: 200
            -
              Name: SENZING_RECORD_MAX
              Value: !Sub "${SenzingRecordMax}"
            -
              Name: SENZING_RECORD_MIN
              Value: !Sub "${SenzingRecordMin}"
            -
              Name: SENZING_RECORD_MONITOR
              Value: 100000
            -
              Name: SENZING_SQS_QUEUE_URL
              Value: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsQueue.QueueName}"
            -
              Name: SENZING_SUBCOMMAND
              Value: gzipped-json-to-sqs-batch
            -
              Name: SENZING_THREADS_PER_PRINT
              Value: 30
          Essential: true
          Image: senzing/stream-producer:1.2.3
          LinuxParameters:
            Capabilities: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: job
          Name: producer1
          Privileged: false
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
      Cpu: 1024
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      Family: !Sub "${AWS::StackName}-task-definition-stream-producer-1"
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-stream-producer"
      TaskRoleArn: !GetAtt IamRoleLambda.Arn
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionStreamLoader:
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub "postgresql://${DbUsername}:${DbPassword}@${RdsDbCluster.Endpoint.Address}:${RdsDbCluster.Endpoint.Port}/G2"
            -
              Name: SENZING_DATA_SOURCE
              Value: TEST
            -
              Name: SENZING_DELAY_IN_SECONDS
              Value: 900
            -
              Name: SENZING_DELAY_RANDOMIZED
              Value: true
            -
              Name: SENZING_ENTITY_TYPE
              Value: GENERIC
            -
              Name: SENZING_GOVERNOR_CHECK_TIME_INTERVAL_IN_SECONDS
              Value: 600
            -
              Name: SENZING_GOVERNOR_DATABASE_URLS
              Value: !Sub "postgresql://${DbUsername}:${DbPassword}@${RdsDbCluster.Endpoint.Address}:${RdsDbCluster.Endpoint.Port}/G2"
            -
              Name: SENZING_LOG_LEVEL
              Value: info
            -
              Name: SENZING_MONITORING_PERIOD_IN_SECONDS
              Value: 600
            -
              Name: SENZING_PRIME_ENGINE
              Value: true
            -
              Name: SENZING_SKIP_DATABASE_PERFORMANCE_TEST
              Value: true
            -
              Name: SENZING_SQS_QUEUE_URL
              Value: !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SqsQueue.QueueName}"
            -
              Name: SENZING_SUBCOMMAND
              Value: sqs
            -
              Name: SENZING_THREADS_PER_PROCESS
              Value: 8
          Essential: true
          Image: senzing/stream-loader:1.6.5
          LinuxParameters:
            Capabilities: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: stream-loader
          Privileged: false
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
      Cpu: 1024
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      Family: !Sub "${AWS::StackName}-task-definition-stream-loader"
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-stream-loader"
      TaskRoleArn: !GetAtt IamRoleLambda.Arn
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/1.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionRedoer:
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      ContainerDefinitions:
        -
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub "postgresql://${DbUsername}:${DbPassword}@${RdsDbCluster.Endpoint.Address}:${RdsDbCluster.Endpoint.Port}/G2"
            -
              Name: SENZING_EXIT_ON_THREAD_TERMINATION
              Value: true
            -
              Name: SENZING_GOVERNOR_CHECK_TIME_INTERVAL_IN_SECONDS
              Value: 600
            -
              Name: SENZING_GOVERNOR_DATABASE_URLS
              Value: !Sub "postgresql://${DbUsername}:${DbPassword}@${RdsDbCluster.Endpoint.Address}:${RdsDbCluster.Endpoint.Port}/G2"
            -
              Name: SENZING_LOG_LEVEL
              Value: info
            -
              Name: SENZING_MONITORING_PERIOD_IN_SECONDS
              Value: 600
            -
              Name: SENZING_REDO_SLEEP_TIME_IN_SECONDS
              Value: 600
            -
              Name: SENZING_SUBCOMMAND
              Value: redo
          Essential: true
          Image: senzing/redoer:1.3.4
          LinuxParameters:
            Capabilities: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: redoer
          Privileged: false
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
      Cpu: 4096
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      Family: !Sub "${AWS::StackName}-task-definition-stream-loader"
      Memory: 16384
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-redoer"
      TaskRoleArn: !GetAtt IamRoleLambda.Arn
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/1.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionApiServer:
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      ContainerDefinitions:
        -
          Command:
            - -httpPort
            - "8250"
            - -bindAddr
            - all
            - -iniFile
            - /etc/opt/senzing/G2Module.ini
            - -allowedOrigins
            - "*"
            - -enableAdmin
          Environment:
            -
              Name: SENZING_DATABASE_URL
              Value: !Sub "postgresql://${DbUsername}:${DbPassword}@${RdsDbCluster.Endpoint.Address}:${RdsDbCluster.Endpoint.Port}/G2"
          Essential: true
          Image: senzing/senzing-api-server:2.3.0
          LinuxParameters:
            Capabilities: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: true
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: true
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: true
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: api-server
          Privileged: false
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
      Cpu: 1024
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      Family: !Sub "${AWS::StackName}-task-definition-api-server"
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-api-server"
      TaskRoleArn: !GetAtt IamRoleLambda.Arn
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/1.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition


  EcsTaskDefinitionSshd:
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      ContainerDefinitions:
        -
          Essential: true
          Image: senzing/sshd:1.0.2
          LinuxParameters:
            Capabilities: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-log-group"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: service
          MountPoints:
            -
              SourceVolume: senzing-data-version-dir
              ContainerPath: /opt/senzing/data
              ReadOnly: false
            -
              SourceVolume: senzing-etc-dir
              ContainerPath: /etc/opt/senzing
              ReadOnly: false
            -
              SourceVolume: senzing-g2-dir
              ContainerPath: /opt/senzing/g2
              ReadOnly: false
            -
              SourceVolume: senzing-var-dir
              ContainerPath: /var/opt/senzing
              ReadOnly: false
          Name: sshd
          Privileged: false
          PseudoTerminal: false
          ReadonlyRootFilesystem: false
      Cpu: 1024
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      Family: !Sub "${AWS::StackName}-task-definition-sshd"
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-definition-sshd"
      Volumes:
        -
          Name: senzing-data-version-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /data/1.0.0
        -
          Name: senzing-etc-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /etc
        -
          Name: senzing-g2-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /g2
        -
          Name: senzing-var-dir
          EFSVolumeConfiguration:
              AuthorizationConfig: {}
              FilesystemId:
                Ref: EfsFileSystem
              RootDirectory: /var
    Type: AWS::ECS::TaskDefinition

# -- Iam -----------------------------------------------------------------

#  IamAccessKeyLambda:
#    Type: AWS::IAM::AccessKey
#    Properties:

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html

  IamRoleLambda:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - lambda.amazonaws.com
                - sqs.amazonaws.com
      Path: "/"
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Action:
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ecs:DescribeTasks
                  - ecs:RunTask
                  - iam:PassRole
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:*
                Effect: Allow
                Resource: '*'
              -
                Action:
                  - iam:PassRole
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
            Version: '2012-10-17'
          PolicyName: LambdaFunctionPolicy
      RoleName: !Sub "${AWS::StackName}-iam-role-lambda"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-lambda"
    Type: AWS::IAM::Role


# -- LambdaFunction -----------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html

  LambdaFunctionDebug:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import cfnresponse
          import json
          import logging
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            try:
              logger.info("Event: {0}".format(json.dumps(event)))
            except Exception as e:
              logger.error(e)
              traceback.print_exc()
            finally:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Description: Logs the event object
      FunctionName: !Sub "${AWS::StackName}-lambda-debug"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-debug"
      Timeout: 2
    Type: AWS::Lambda::Function


  LambdaFunctionSleeper:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import cfnresponse
          import json
          import logging
          import time
          import traceback

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              result = cfnresponse.SUCCESS
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      sleep_time_in_seconds = int(properties.get('SleepTimeInSeconds', 0))
                      logger.info("Sleeping {0} seconds.".format(sleep_time_in_seconds))
                      time.sleep(sleep_time_in_seconds)
                      logger.info("Awake.")
              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Sleeps for a period of time
      FunctionName: !Sub "${AWS::StackName}-lambda-sleep"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-sleep"
      Timeout: 600
    Type: AWS::Lambda::Function

# LambdaFunctionInitEfs:
#   Type: AWS::Lambda::Function
#   DependsOn:
#     - EfsMountTarget1
#     - EfsMountTarget2
#   Properties:
#     Code:
#       ZipFile: |
#         #!/usr/bin/env python3
#
#         import cfnresponse
#         import json
#         import logging
#         import time
#         import os
#         import traceback
#
#         logger = logging.getLogger()
#         logger.setLevel(logging.INFO)
#
#         def handler(event, context):
#             result = cfnresponse.SUCCESS
#             try:
#                 logger.info("Event: {0}".format(json.dumps(event)))
#                 if event['RequestType'] in ['Create', 'Update']:
#                     os.makedirs('/mnt/efs0/data/1.0.0', exist_ok=True)
#                     os.makedirs('/mnt/efs0/etc', exist_ok=True)
#                     os.makedirs('/mnt/efs0/g2', exist_ok=True)
#                     os.makedirs('/mnt/efs0/var', exist_ok=True)
#             except Exception as e:
#                 logger.error(e)
#                 traceback.print_exc()
#                 result = cfnresponse.FAILED
#             finally:
#                 cfnresponse.send(event, context, result, {})
#
#     Description: Create subdirectories on EFS
#     FileSystemConfigs:
#       -
#         Arn: !GetAtt EfsAccessPoint.Arn
#         LocalMountPath: "/mnt/efs0"
#     FunctionName: !Sub "${AWS::StackName}-lambda-init-efs"
#     Handler: index.handler
#     Role: !GetAtt IamRoleLambda.Arn
#     Runtime: python3.8
#     Tags:
#       - Key: Name
#         Value: !Sub "${AWS::StackName}-lambda-init-efs"
#     Timeout: 300
#     VpcConfig:
#       SecurityGroupIds:
#         - !Ref EcsSecurityGroup
#       SubnetIds:
#         - !Ref Ec2SubnetPublic1
#         - !Ref Ec2SubnetPublic2

  LambdaFunctionRunTask:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      run_task_parameters = properties.get('RunTaskParameters', {})

                      # Change strings to integers.

                      numbers = [
                          "count",
                      ]
                      for number in numbers:
                          if number in run_task_parameters:
                              run_task_parameters[number] = int(run_task_parameters[number])

                      # Make AWS ECS request.

                      ecs = boto3.client('ecs')
                      response = ecs.run_task(**run_task_parameters)

                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Runs an ECS task
      FunctionName: !Sub "${AWS::StackName}-lambda-run"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-run"
      Timeout: 30
    Type: AWS::Lambda::Function


  LambdaFunctionRunTaskAndWait:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3

          import boto3
          import cfnresponse
          import datetime
          import json
          import logging
          import traceback
          from json import JSONEncoder

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class DateTimeEncoder(JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, (datetime.date, datetime.datetime)):
                      return obj.isoformat()

          def handler(event, context):
              result = cfnresponse.SUCCESS
              response = {}
              try:
                  logger.info("Event: {0}".format(json.dumps(event)))
                  if event['RequestType'] in ['Create', 'Update']:
                      properties = event.get('ResourceProperties', {})
                      run_task_parameters = properties.get('RunTaskParameters', {})

                      # Change strings to integers.

                      numbers = [
                          "count",
                      ]
                      for number in numbers:
                          if number in run_task_parameters:
                              run_task_parameters[number] = int(run_task_parameters[number])

                      # Make AWS ECS request.
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task

                      ecs = boto3.client('ecs')
                      response = ecs.run_task(**run_task_parameters)

                      # Wait for completion.
                      # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#waiters

                      waiter = ecs.get_waiter('tasks_stopped')
                      waiter.wait(
                          cluster=properties['ClusterId'],
                          tasks=[response['tasks'][0]['taskArn']],
                      )

                      response['describe_task'] = ecs.describe_tasks(
                          cluster=properties['ClusterId'],
                          tasks=[response['tasks'][0]['taskArn']],
                      )
                      logger.info("describe_task response: {0}".format(json.dumps(response['describe_task'], cls=DateTimeEncoder)))

                      exit_code = response.get('describe_task', {}).get('tasks', [{}])[0].get('containers', [{}])[0].get('exitCode', 99)
                      if exit_code != 0:
                          result = cfnresponse.FAILED
                  logger.info("Response: {0}".format(json.dumps(response, cls=DateTimeEncoder)))

              except Exception as e:
                  logger.error(e)
                  traceback.print_exc()
                  result = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, result, {})

      Description: Runs an ECS task and waits until completion
      FunctionName: !Sub "${AWS::StackName}-lambda-run-and-wait"
      Handler: index.handler
      Role: !GetAtt IamRoleLambda.Arn
      Runtime: python3.8
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-run-and-wait"
      Timeout: 600
    Type: AWS::Lambda::Function

# -- Wait for backing services to come up -------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-waitconditionhandle.html

# WaitConditionHandle:
#   Type: AWS::CloudFormation::WaitConditionHandle

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-waitcondition.html

# WaitConditionEfs:
#   Type: AWS::CloudFormation::WaitCondition
#   DependsOn:
#     - EfsMountTarget1
#     - EfsMountTarget2
#   Properties:
#     Handle: !Ref WaitConditionHandle
#     Timeout: 600

# -- Run ECS tasks-------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html

# LambdaRunnerDebug:
#   DependsOn: LambdaFunctionDebug
#   Properties:
#     ServiceToken: !GetAtt LambdaFunctionDebug.Arn
#     Tags:
#       - Key: Name
#         Value: !Sub "${AWS::StackName}-lambda-runner-debug"
#   Type: Custom::LambdaRunnerDebug


  LambdaRunnerSleeper:
    Properties:
      ServiceToken: !GetAtt LambdaFunctionSleeper.Arn
      SleepTimeInSeconds: 180
    Type: Custom::LambdaRunnerSleeper


# LambdaRunnerInitEfs:
#   DependsOn:
#     - EfsMountTarget1
#     - EfsMountTarget2
#   Properties:
#     ServiceToken: !GetAtt LambdaFunctionInitEfs.Arn
#   Type: Custom::LambdaRunnerInitEfs


  LambdaRunnerInitEfs:
    DependsOn:
     - EfsFileSystem
     - EfsMountTarget1
     - EfsMountTarget2
     - LambdaRunnerSleeper
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: ENABLED
            securityGroups:
              - !Ref EcsSecurityGroup
            subnets:
              - !Ref Ec2SubnetPublic1
              - !Ref Ec2SubnetPublic2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-efs"
        taskDefinition: !Ref EcsTaskDefinitionInitEfs
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
    Type: Custom::LambdaRunnerInitEfs


  LambdaRunnerInstallSenzing:
    DependsOn:
     - LambdaRunnerInitEfs
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: ENABLED
            securityGroups:
              - !Ref EcsSecurityGroup
            subnets:
              - !Ref Ec2SubnetPublic1
              - !Ref Ec2SubnetPublic2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-yum"
        taskDefinition: !Ref EcsTaskDefinitionInstallSenzing
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
    Type: Custom::LambdaRunnerInstallSenzing


  LambdaRunnerInitPostgres:
    DependsOn:
     - LambdaRunnerInstallSenzing
     - RdsDbCluster
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: ENABLED
            securityGroups:
              - !Ref EcsSecurityGroup
            subnets:
              - !Ref Ec2SubnetPublic1
              - !Ref Ec2SubnetPublic2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-postgres"
        taskDefinition: !Ref EcsTaskDefinitionInitPostgres
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
    Type: Custom::LambdaRunnerInitPostgres


  LambdaRunnerInitSenzing:
    DependsOn:
     - LambdaRunnerInitPostgres
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: ENABLED
            securityGroups:
              - !Ref EcsSecurityGroup
            subnets:
              - !Ref Ec2SubnetPublic1
              - !Ref Ec2SubnetPublic2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-senzing"
        taskDefinition: !Ref EcsTaskDefinitionInitSenzing
      ServiceToken: !GetAtt LambdaFunctionRunTaskAndWait.Arn
    Type: Custom::LambdaRunnerInitSenzing


  LambdaRunnerStreamProducer:
    DependsOn:
     - EfsFileSystem
     - EfsMountTarget1
     - EfsMountTarget2
     - LambdaRunnerSleeper
     - SqsQueue
    Properties:
      ClusterId: !Ref EcsCluster
      RunTaskParameters:
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html#ECS.Client.run_task
        cluster: !Ref EcsCluster
        count: 1
        launchType: FARGATE
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIp: ENABLED
            securityGroups:
              - !Ref EcsSecurityGroup
            subnets:
              - !Ref Ec2SubnetPublic1
              - !Ref Ec2SubnetPublic2
        platformVersion: 1.4.0
        tags:
          - key: Name
            value: !Sub "${AWS::StackName}-lambda-runner-init-senzing"
        taskDefinition: !Ref EcsTaskDefinitionStreamProducer
      ServiceToken: !GetAtt LambdaFunctionRunTask.Arn
    Type: Custom::LambdaRunnerStreamProducer

# -- EcsService ---------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html

  EcsServiceStreamLoader:
    DependsOn:
     - LambdaRunnerInitSenzing
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 8
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref Ec2SubnetPublic1
            - !Ref Ec2SubnetPublic2
      PlatformVersion: 1.4.0
      PropagateTags: TASK_DEFINITION
      ServiceName: stream-loader
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-stream-loader"
      TaskDefinition: !Ref EcsTaskDefinitionStreamLoader
    Type: AWS::ECS::Service


  EcsServiceRedoer:
    DependsOn:
     - LambdaRunnerInitSenzing
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref Ec2SubnetPublic1
            - !Ref Ec2SubnetPublic2
      PlatformVersion: 1.4.0
      ServiceName: redoer
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-redoer"
      TaskDefinition: !Ref EcsTaskDefinitionRedoer
    Type: AWS::ECS::Service


  EcsServiceApiServer:
    Condition: IfStartApiServer
    DependsOn:
     - LambdaRunnerInitEfs
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref Ec2SubnetPublic1
            - !Ref Ec2SubnetPublic2
      PlatformVersion: 1.4.0
      ServiceName: api-server
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-api-server"
      TaskDefinition: !Ref EcsTaskDefinitionApiServer
    Type: AWS::ECS::Service


  EcsServiceSshd:
    Condition: IfStartSshd
    DependsOn:
     - LambdaRunnerInitEfs
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref Ec2SubnetPublic1
            - !Ref Ec2SubnetPublic2
      PlatformVersion: 1.4.0
      ServiceName: sshd
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-service-sshd"
      TaskDefinition: !Ref EcsTaskDefinitionSshd
    Type: AWS::ECS::Service

# -- AutoScaling --------------------------------------------------------------

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalabletarget.html

  ApplicationAutoScalingScalableTarget:
    Properties:
      MaxCapacity: 100
      MinCapacity: 1
      ResourceId: !Sub "service/${EcsCluster}/${EcsServiceStreamLoader.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      SuspendedState:
        DynamicScalingInSuspended: false
        DynamicScalingOutSuspended: false
        ScheduledScalingSuspended: false
    Type: AWS::ApplicationAutoScaling::ScalableTarget

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalingpolicy.html

  ApplicationAutoScalingScalingPolicy:
    Properties:
      PolicyName: !Sub "${AWS::StackName}-scaling-policy-stream-loader"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ApplicationAutoScalingScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 1200
        ScaleOutCooldown: 300
        TargetValue: 30
    Type: AWS::ApplicationAutoScaling::ScalingPolicy

# -----------------------------------------------------------------------------
# Outputs
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
# -----------------------------------------------------------------------------

Outputs:

  Ec2Vpc:
    Description: The ID of the VPC
    Value: !Ref Ec2Vpc
    Export:
      Name: !Sub "${AWS::StackName}-ec2-VpcId"


  Subnet1:
    Description: The ID of subnet 1
    Value: !Ref Ec2SubnetPublic1
    Export:
      Name: !Sub "${AWS::StackName}-Subnet1"


  Subnet2:
    Description: The ID of subnet 2
    Value: !Ref Ec2SubnetPublic2
    Export:
      Name: !Sub "${AWS::StackName}-Subnet2"
